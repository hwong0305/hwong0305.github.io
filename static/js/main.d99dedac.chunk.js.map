{"version":3,"sources":["Components/Board.js","reorder.js","App.js","serviceWorker.js","index.js"],"names":["Board","props","listId","listType","name","useState","message","setMessage","className","id","droppableId","type","direction","isCombineEnabled","dropProvided","droppableProps","ref","innerRef","todos","map","msg","index","draggableId","key","dragProvided","dragHandleProps","draggableProps","onClick","window","confirm","messages","splice","setTodos","placeholder","value","rows","onChange","e","target","onKeyDown","shiftKey","preventDefault","push","reorder","todoMap","source","destination","current","next","reordered","list","startIndex","endIndex","result","removed","reorderList","App","ToDo","Doing","Done","Approved","setTodoMap","setFunctions","update","onDragEnd","Object","keys","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d99dedac.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\n\nconst Board = props => {\n  const { listId, listType, name } = props;\n  const [message, setMessage] = useState('');\n  return (\n    <div className=\"kanban\">\n      <header className=\"board-header\" id={name}>\n        <span>{name}</span>\n      </header>\n      <main>\n        <div>\n          <Droppable\n            droppableId={listId}\n            type={listType}\n            direction=\"vertical\"\n            isCombineEnabled={true}\n          >\n            {dropProvided => (\n              <div {...dropProvided.droppableProps}>\n                <div>\n                  <div ref={dropProvided.innerRef}>\n                    <ul className=\"todos\">\n                      {props.todos.map((msg, index) => (\n                        <Draggable\n                          draggableId={`${props.name}:${index}`}\n                          key={index}\n                          index={index}\n                        >\n                          {dragProvided => (\n                            <div\n                              {...dragProvided.dragHandleProps}\n                              {...dragProvided.draggableProps}\n                              ref={dragProvided.innerRef}\n                              className=\"item\"\n                            >\n                              <div>\n                                <li\n                                  onClick={() => {\n                                    const confirmed = window.confirm(\n                                      'Are you sure you want to delete?'\n                                    );\n                                    if (!confirmed) return;\n\n                                    const messages = [...props.todos];\n\n                                    messages.splice(index, 1);\n                                    props.setTodos(messages);\n                                  }}\n                                  key={index}\n                                >\n                                  {msg}\n                                </li>\n                              </div>\n                            </div>\n                          )}\n                        </Draggable>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n                {dropProvided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </div>\n      </main>\n      <footer>\n        <textarea\n          value={message}\n          rows=\"1\"\n          type=\"text\"\n          onChange={e => setMessage(e.target.value)}\n          onKeyDown={e => {\n            if (e.key === 'Enter' && e.shiftKey === false) {\n              e.preventDefault();\n              if (message === '') return;\n              const messages = [...props.todos];\n              messages.push(message);\n              props.setTodos(messages);\n              setMessage('');\n              return false;\n            }\n          }}\n        ></textarea>\n        <button\n          type=\"button\"\n          className=\"submit-button\"\n          onClick={() => {\n            if (message === '') return;\n            const messages = [...props.todos];\n            messages.push(message);\n            setMessage('');\n            props.setTodos(messages);\n          }}\n        >\n          Send\n        </button>\n      </footer>\n    </div>\n  );\n};\n\nexport default Board;\n","const reorderList = (list, startIndex, endIndex) => {\n  const result = [...list];\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst reorder = (todoMap, source, destination) => {\n  const current = [...todoMap[source.droppableId]];\n  const next = [...todoMap[destination.droppableId]];\n  const target = current[source.index];\n\n  if (source.droppableId === destination.droppableId) {\n    const reordered = reorderList(current, source.index, destination.index);\n    const result = { ...todoMap, [source.droppableId]: reordered };\n    return result;\n  }\n\n  current.splice(source.index, 1);\n  next.splice(destination.index, 0, target);\n\n  const result = {\n    ...todoMap,\n    [source.droppableId]: current,\n    [destination.droppableId]: next,\n  };\n\n  return result;\n};\n\nexport default reorder;\n","import React, { useState } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport './App.css';\n\nimport Board from './Components/Board';\nimport reorder from './reorder';\n\nconst App = () => {\n  const [todoMap, setTodoMap] = useState({\n    ToDo: [],\n    Doing: [],\n    Done: [],\n    Approved: [],\n  });\n\n  const setTodos = update => {\n    setTodoMap({ ...todoMap, ToDo: update });\n  };\n  const setDoing = update => {\n    setTodoMap({ ...todoMap, Doing: update });\n  };\n  const setDone = update => {\n    setTodoMap({ ...todoMap, Done: update });\n  };\n  const setApproved = update => {\n    setTodoMap({ ...todoMap, Approved: update });\n  };\n\n  const setFunctions = [setTodos, setDoing, setDone, setApproved];\n\n  const onDragEnd = result => {\n    const { destination, source } = result;\n\n    if (!destination) return;\n    setTodoMap(reorder(todoMap, source, destination));\n  };\n\n  return (\n    <div className=\"container\">\n      <DragDropContext onDragEnd={onDragEnd}>\n        {Object.keys(todoMap).map((key, id) => (\n          <Board\n            name={key}\n            key={id}\n            listId={key}\n            listType=\"CARD\"\n            todos={todoMap[key]}\n            setTodos={setFunctions[id]}\n          ></Board>\n        ))}\n      </DragDropContext>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}